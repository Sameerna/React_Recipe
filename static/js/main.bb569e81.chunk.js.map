{"version":3,"sources":["components/SearchBar.js","components/Recipe.js","components/Recipes.js","App.js","components/RecipeDetail.js","components/Router.js","serviceWorker.js","index.js"],"names":["SearchBar","props","react_default","a","createElement","style","marginBottom","onSubmit","e","preventDefault","target","recipeName","value","className","type","name","Recipe","src","data","image_url","alt","recipe_id","title","publisher","react_router_dom","to","pathname","concat","state","Recipes","recipes","map","recipe","components_Recipe","key","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","searchRecipe","bind","assertThisInitialized","_this2","fetch","process","then","response","json","setState","components_SearchBar","components_Recipes","React","Component","RecipeDetail","match","params","id","recipeId","_this$state$recipe","source_url","ingredients","href","rel","ingredient","index","Router","react_router","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","components_Router","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.bb569e81.chunk.js","sourcesContent":["import React from 'react';\n\nfunction SearchBar(props) {\n  return (\n    <form\n        style={{ marginBottom:\"2rem\" }} \n        onSubmit={(e)=>{\n          e.preventDefault();\n          props.onSubmit(e.target.recipeName.value);\n    }}>\n        <input\n         className=\"form__input\" \n         type=\"text\"\n         name=\"recipeName\"\n        />\n        <input\n          className=\"form__button\" \n          type=\"submit\"\n        />\n    </form>\n  );\n}\n\nexport default SearchBar;","import React from 'react';\nimport { Link } from 'react-router-dom'\n\nfunction Recipe(props) {\n    return (\n        <div\n            className=\"col-md-4\"\n            style={{ marginBottom: \"2rem\" }}\n        >\n            <div className=\"recipes__box\">\n                <img\n                    className=\"recipe__box-img\"\n                    src={props.data.image_url}\n                    alt={props.data.recipe_id}\n                />\n                <div className=\"recipe__text\">\n                    <h5\n                        className=\"recipes__title\"\n                    >\n                        {props.data.title}\n                    </h5>\n                    <p\n                        className=\"recipes__subtitle\"\n                    >Publisher:\n                        <span>\n                            {props.data.publisher}\n                        </span>\n                    </p>\n                </div>\n                <button className=\"recipe_buttons\">\n                    <Link\n                        to={{\n                            pathname: `/recipe/${props.data.recipe_id}`,\n                            state: props.data\n                        }}\n                    >\n                        View Recipe\n                    </Link>\n                </button>\n\n            </div>\n        </div>\n    );\n}\n\nexport default Recipe;\n","import React from 'react';\nimport Recipe from './Recipe';\n\nfunction Recipes(props) {\n  return (\n    <div className=\"container\">\n      <div className=\"row\">\n        {\n          props.recipes && props.recipes.map(recipe => <Recipe key={recipe.recipe_id} data={recipe} />)\n        }\n      </div>\n    </div>\n  );\n}\n\nexport default Recipes;\n","import React from 'react';\nimport './App.css';\nimport SearchBar from './components/SearchBar';\nimport Recipes from './components/Recipes';\n\nconst YOUR_API_KEY = process.env.REACT_APP_API_KEY;\n\nclass App extends React.Component {\n  constructor(props){\n    super(props);\n    this.searchRecipe = this.searchRecipe.bind(this);\n    this.state = {\n      recipes: []\n    };\n  } \n\n  searchRecipe(recipeName){\n    fetch(`https://cors-anywhere.herokuapp.com/https://recipesapi.herokuapp.com/api/search?key=${YOUR_API_KEY}&q=${recipeName}`)\n    .then(response=>response.json())\n    .then(data=>\n      this.setState({\n      recipes: data.recipes\n    }));\n  }\n  render(){\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h2 className=\"App-title\">Recipe Search</h2>\n        </header>\n        <SearchBar onSubmit={this.searchRecipe}/>\n        <Recipes recipes={this.state.recipes} />\n      </div>    \n    );\n  }\n}\n\nexport default App;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\nconst YOUR_API_KEY = process.env.REACT_APP_API_KEY;\n\nclass RecipeDetail extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            recipe: null\n        };\n    }\n\n    componentDidMount() {\n        this.searchRecipe(this.props.match.params.id);\n    }\n    \n    searchRecipe(recipeId) {\n        fetch(`https://cors-anywhere.herokuapp.com/https://recipesapi.herokuapp.com/api/search?key=${YOUR_API_KEY}&rId=${recipeId}`)\n            .then(response => response.json())\n            .then(data => this.setState({\n                recipe: data.recipe\n            }));\n    }\n\n    render() {\n        if (this.state.recipe) {\n            const {\n                image_url,\n                recipe_id,\n                title,\n                publisher,\n                source_url,\n                ingredients\n            } = this.state.recipe;\n\n            return (\n                <div className=\"container\">\n                    <div className=\"active-recipe\">\n                        <img\n                            className=\"active-recipe__img\"\n                            src={image_url}\n                            alt={recipe_id}\n                        />\n                        <h3\n                            className=\"active-recipe__title\"\n                        >\n                            {title}\n                        </h3>\n                        <h4\n                            className=\"active-recipe__publisher\"\n                        >\n                            {publisher}\n                        </h4>\n                        <p\n                            className=\"active-recipe__website\"\n                        >Website:\n                            <span>\n                                <a\n                                    href={source_url}\n                                    target=\"_blank\"\n                                    rel=\"noopener noreferrer\"\n                                >\n                                    {source_url}\n                                </a>\n                            </span>\n                        </p>\n                        <ul>\n                            {\n                                ingredients.map(\n                                    (ingredient, index) => (\n                                        <li key={index}>{ingredient}</li>\n                                    )\n                                )\n                            }\n                        </ul>\n                        <button \n                            className=\"active-recipe__button\"\n                        >\n                            <Link\n                                to=\"/\"\n                            >\n                                Go Home\n                            </Link>\n                        </button>\n                    </div>\n                </div>\n            );\n        }\n        return (\n            <div>\n                <p>Fetching Data</p>\n            </div>\n        );\n\n    }\n}\n\nexport default RecipeDetail;\n","import React from 'react';\nimport {\n    BrowserRouter,\n    Switch,\n    Route\n} from \"react-router-dom\";\n\nimport App from './../App';\nimport RecipeDetail from \"./RecipeDetail\";\n\nfunction Router() {\n    return (\n        <BrowserRouter>\n            <Switch>\n                <Route \n                    exact \n                    path=\"/\" \n                    component={App} \n                />\n                <Route \n                    path=\"/recipe/:id\" \n                    component={RecipeDetail} \n                />\n            </Switch>\n        </BrowserRouter>\n    );\n}\n\nexport default Router;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport Router from './components/Router';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Router />,document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}